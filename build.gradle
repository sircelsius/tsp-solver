apply plugin: 'java'
apply plugin: 'com.google.protobuf'

group = 'com.celsius.tsp'
version = '1.0-SNAPSHOT'

description = """tsp-solver"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
  }
}

repositories {
  mavenCentral()
  mavenLocal()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'TSP Solver',
                   'Implementation-Version': version,
                   'Main-Class': 'com.celsius.tsp.TravellingSalesmanSolverApplication'
    }
}

def grpcVersion = '1.0.0'

dependencies {
  compile "io.grpc:grpc-netty:${grpcVersion}"
  compile "io.grpc:grpc-protobuf:${grpcVersion}"
  compile "io.grpc:grpc-stub:${grpcVersion}"
  compile 'io.reactivex.rxjava2:rxjava:2.0.0'
  compile 'io.dropwizard.metrics:metrics-core:3.1.0'

  compile 'org.projectlombok:lombok:1.12.6'

  testCompile 'junit:junit:4.12'
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        option 'enable_deprecated=false'
      }
    }
  }
}

apply plugin: 'jacoco'

jacocoTestReport {
    reports {
        xml.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
}

apply plugin: 'checkstyle'

checkstyle {
  configFile = file("$rootDir/checkstyle.xml")
  toolVersion = "6.17"
  ignoreFailures = false
  if (rootProject.hasProperty("checkstyle.ignoreFailures")) {
    ignoreFailures = rootProject.properties["checkstyle.ignoreFailures"].toBoolean()
  }
  configProperties["rootDir"] = rootDir
}

apply plugin: "application"

startScripts.enabled = false

task travellingSalesmanProblem(type: CreateStartScripts) {
  mainClassName = 'com.celsius.tsp.TravellingSalesmanSolverApplication'
  applicationName = 'travelling-salesman-server'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
  from(travellingSalesmanProblem)
  fileMode = 0755
}

apply plugin: 'idea'

idea {
  module {
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/java")
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc")
  }
}
